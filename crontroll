#!/bin/bash
banner="\
#                                    ▗▄▖  ▗▄▖
#                      ▐▌            ▝▜▌  ▝▜▌
#  ▟██▖ █▟█▌ ▟█▙ ▐▙██▖▐███  █▟█▌ ▟█▙  ▐▌   ▐▌
# ▐▛  ▘ █▘  ▐▛ ▜▌▐▛ ▐▌ ▐▌   █▘  ▐▛ ▜▌ ▐▌   ▐▌
# ▐▌    █   ▐▌ ▐▌▐▌ ▐▌ ▐▌   █   ▐▌ ▐▌ ▐▌   ▐▌
# ▝█▄▄▌ █   ▝█▄█▘▐▌ ▐▌ ▐▙▄  █   ▝█▄█▘ ▐▙▄  ▐▙▄
#  ▝▀▀  ▀    ▝▀▘ ▝▘ ▝▘  ▀▀  ▀    ▝▀▘   ▀▀   ▀▀
#"
set -e
if [ -z "${CRONDIR}" ]; then
    crondir="$HOME/.cron"
else
    crondir="${CRONDIR}"
fi
if [ -z "${CRONLOGDIR}" ]; then
    logdir="$HOME/.logs/cronjobs"
else
    logdir="${CRONLOGDIR}"
fi

if [ -z "${CRONLOCKDIR}" ]; then
    lockdir="$HOME/.local/share/cronjobs-locks"
else
    lockdir="${CRONLOCKDIR}"
fi
if [ ! -d "$crondir" ]; then
    echo "$crondir doesn't exist yet. Set up your cron files first"
    exit 1
fi

logcommand=" 2>&1 | awk '{ print strftime(\"%%Y-%%m-%%d %%H:%%M:%%S\"), \$0;}' >> %s/current"
if command -v svlogd > /dev/null; then
    logcommand=" 2>&1 | svlogd -tt %s"
fi

cd "$crondir"

help() {
    echo "Usage:"
    echo "crontroll status <cronjob>    get status of cronjob"
    echo "crontroll enable <cronjob>    enable cronjob"
    echo "crontroll disable <cronjob>   disable cronjob"
    echo "crontroll reload              reload cronjobs after adding or removing files in $crondir"
    echo "crontroll list                list all configured cron jobs"
    echo "crontroll crontab             list all configured cron jobs, in the format of a normal crontab"
    echo "crontroll now <cronjob>       run cronjob now"
    echo "crontroll now_force <cronjob> run cronjob now, even if it is disabled"
    echo "crontroll now_wait <cronjob>  run cronjob now, even if it is disabled, and wait until it finishes"
}

checkargs() {
    if [ -z "$1" ]; then
        echo >&2 "Not enough arguments"
        help
        exit 1
    fi
}
get_command() {
    lock="$lockdir/$1.lock"
    cron_command=$(cut -d" " -f6- < "$1")
    escaped_command=$(printf "%s" "$cron_command" | sed "s/'/'\\\\''/g")
    echo -n " sh -c '"
    echo -n "export CRONJOB=1;"
    echo -n "if ! kill -s 0 \`cat \"$lock\" 2>/dev/null\` 2>/dev/null; then "
    echo -n "echo \$\$ > \"$lock\" && "
    echo -n "(echo \"starting cronjob \$\$\";"
    echo -n "kill -s 0 \$\$;"
    echo -n "$escaped_command;"
    echo -n "echo cronjob finished;)"
    # Disable logger by creating a file called .NAME-nolog
    if [ ! -f ."$1"-nolog ]; then
        #shellcheck disable=SC2059
        printf "$logcommand" "$logdir/$1"
    fi
    echo -n "; rm \"$lock\";"
    echo -n "else "
    echo -n "echo \"Currently already running\";"
    echo -n "fi"
    echo -n "'"
    echo
}
reload_crontab() {
    mkdir -p "$logdir"
    mkdir -p "$lockdir"
    if ls ./* 1> /dev/null 2>&1; then
        echo "$banner"
        echo "# This crontab is managed by crontroll. Do not edit it manually, as it will get overwritten"
        echo -en "\n\n\n"
        for f in *; do
            mkdir -p "$logdir/$f"
            echo "# $f"
            echo -n "$(cut -d" " -f1-5 < "$f") "
            get_command "$f"
        done
    fi | crontab -
}

error() {
    echo >&2 "$1"
    exit "$2"
}

list_crontab() {
    if [ -n "$(ls)" ]; then
        for c in *; do
            output=""
            res=$(main status "$c" | cut -d: -f1)
            if [ "$res" = "enabled" ]; then
                if [ -t 1 ]; then
                    output="$output\033[0;32m"
                fi
            else
                if [ -t 1 ]; then
                    output="$output\033[2m"
                fi
            fi
            output="$output# $c"
            output="$output\n$(< "$c")"
            if [ -t 1 ]; then
                output="$output\033[0m"
            fi
            echo -en "$output\n\n"
        done
    fi
}

list() {
    if [ -n "$(ls)" ]; then
        for c in *; do
            output=""
            res=$(main status "$c" | cut -d: -f1)
            if [ "$res" = "enabled" ]; then
                if [ -t 1 ]; then
                    output="$output\033[0;32m"
                fi
                output="${output}[x]"
            else
                if [ -t 1 ]; then
                    output="$output\033[2m"
                fi
                output="${output}[ ]"
            fi
            output="$output $c"
            if [ -t 1 ]; then
                output="$output\033[0m"
            fi
            echo -en "$output\n"
        done
    fi
}

main() {
    command=$1
    if [ -n "$command" ]; then
        shift
    fi
    if [ "${command}" = "reload" ]; then
        reload_crontab
        exit
    elif [ "${command}" = "crontab" ]; then
        list_crontab
        exit
    elif [ "${command}" = "list" ]; then
        list
        exit
    fi
    checkargs "$@"
    for f in "$@"; do
        if [ ! -f "$f" ]; then
            echo >&2 "$f not found"
            exit 1
        fi
        filecontent="$(cat "$f")"
        firstletter=$(printf %.1s "$filecontent")
        if [ "$firstletter" = '#' ]; then
            cronjob="${filecontent#?}"
        else
            cronjob="${filecontent}"
        fi
        if [ "${command}" = "disable" ]; then
            donesomething=true
            printf "#%s\n" "$cronjob" > "$f"
            reload_crontab
        elif [ "${command}" = "enable" ]; then
            donesomething=true
            printf "%s\n" "$cronjob" > "$f"
            reload_crontab
        elif [ "${command}" = "now" ] || [ "${command}" = "now_force" ] || [ "${command}" = "now_wait" ]; then
            donesomething=true
            lock="$lockdir/$1.lock"
            if [ "$firstletter" = '#' ] && [ "${command}" == "now" ]; then
                error "Command is disabled, run \`crontroll now_force $f\` to run anyway" 1
            fi
            if [ ! -d "$lock" ]; then
                cronjob="$(get_command "$f")"
                # set CRONJOB_NOW so users can check if we're running naturally or with crontroll now
                export CRONJOB_NOW=1
                if [ "${command}" = "now_force" ]; then
                    # set CRONJOB_FORCE so users can check if we're running with now_force
                    export CRONJOB_FORCE=1
                fi
                eval "$cronjob" &
                if [ "${command}" = "now_wait" ]; then
                    wait
                fi
            else
                error "Failed to lock $f" 170
            fi
        elif [ "${command}" = "status" ]; then
            donesomething=true
            if [ "$firstletter" = '#' ]; then
                status="disabled"
            else
                status="enabled"
            fi
            printf "%s: %s; %s\n" "$status" "$f" "$cronjob"
        fi
    done
    if ! $donesomething; then
        checkargs "$command"
        echo >&2 "Unknown command: $command"
    fi
}

main "$@"
